@@@@@@@@@@@@@@@@@@@@@@@@@
Build your Own USB Devices
@@@@@@@@@@@@@@@@@@@@@@@@@

+++++++++++++++++++++++++++++++
AVR Microcontrollers and the V-USB Library
+++++++++++++++++++++++++++++++

Motivation
++++++++++

Rolling Your Own
================

Why?
-------

* Parallel port is dead, serial port is emulated

* Compatibility

* Make what you want

* Fun


Why V-USB?
----------

* Software-emulated USB?  Limited to low-speed devices?

* Cheap, hackable, and you'll learn a lot

* Can run on very minimal hardware 

Today
=====

Projects
---------

* USB Scrollwheel 

* Weather Thing

Topics
------

* USB basics

* V-USB particulars

* Human Interface Devices 

* Custom (Vendor-Specific) USB Commands


USB Background
++++++++++++++

This is USB
=============

%! images/usb_cable.jpg


Wiring: The Physical Layer
==========================


* Pull apart a USB cable: 4 colorful wires


* White \& Green: \com{Data-} \& \com{Data+} \\ 
	differential signaling: opposite voltage levels signify data \\ 
	\com{D+} $>$ \com{D-} \leads 1 \\
	\com{D+} $<$ \com{D-} \leads 0 \\

* The data line signalling voltages are {\bf 3.6V} and 0V

* Data lines are also used to detect devices: \\
        \com{D-} pulled high = low-speed device \\ 
        \com{D+} pulled high = full-speed or high-speed USB \\

* Baud rate (low-speed) 1.50Mb/s $\pm 1.5\%$ \\
	NRZI, bit-stuffed (handled by V-USB library)

* Red \& Black: 5V power supply and ground ($V_{BUS}$)




The USB Protocol is {\bf very} complicated.
=========================

Don't Panic!
------------

* Spec is 600+ pages long -- not including HID usage tables

* Hacker Approach: Just learn what we need to get job done.


Jargon
-----------------

* \emph{Human Interface Device} (HID): \\ Standard USB device classes that people interact with 

* \emph{Host}: Your computer

* \emph{Function}: The USB function on your device

* \emph{Endpoint}: A data source or sink (on your device)

* \emph{Control Endpoint}: Endpoint 0.  \\
  Must be present, two-way, used to control the device.

USB is a Host-Controlled Bus
=================== 

What does this mean?
-------------------

* All transactions are initiated by the host: \\ 
	your device must wait to be asked  
	
* "You will speak only when spoken to"

* $IN$ and $OUT$ are defined from the perspective of the host: \\ 
  data going $IN$ is leaving your microcontroller

Enumeration: What happens when I plug my device in?
------------

* Host resets device then asks for device descriptor \\
  assigns the device an address \\ 
  then resets again and asks for a whole bunch of descriptors

* (Almost) All of this is handled by V-USB library




USB Data Flow Modes: The Ones We Will Use
===================

Four modes
------------

* One mode per endpoint: what does the device need? 

Control Transfers: configuration by host  
------------
*	$IN$/$OUT$ through Endpoint 0: mandatory
*	Also for custom control protocols (Weather Thing)

Interrupt Transfers: high-priority, scheduled transfers 
------------
*	Host periodically polls for data 
*	Device should have data ready when asked  
*	Intended for small/medium amounts of data (Mouse)

USB Data Flow Modes: The Ones We Won't Use
===================

Bulk Transfers: large scheduled transfers 
------------
*       Just like Interrupt, but with lower priority  
*	Meant for moving large amounts of data (Flash drive)

Isochronus Transfers: guaranteed bandwidth 
------------
*	But no error-checking 
* Meant for large amounts of non-critical data (Sound card)

USB Data Flow Modes: Summary
===================

Control Endpoint / Transfer Mode:  
----------------
  Use for device enumeration (handled by V-USB library) \\
  Use for "Vendor-Specific" custom control data

Interrupt Endpoint / Transfer Mode: 
----------------
  Use for keyboard/mouse/gamepad data


Intro to V-USB
++++++++++++++

How Does V-USB Help?
==================

What needed doing?
------------

* Read incoming serial data, NRZI unpack

* Parse it, respond to our device address

* NRZI pack, send out serial data when able

* All this with tight timing

* Bookkeeping: Respond to host's requests for descriptors

What Do We Need To Do?
=====================

Configure
---------

* Configure descriptors, endpoints, AVR pinouts, CPU speed \\
  \com{usbconfig.h}

Write Code
----------------

* Attach/reattach to fake the device resets

* Write functions to handle control data \\ 
  \com{usbFunctionSetup()}
 
* Get our interrupt data ready if we use it \\ 
  \com {usbInterruptIsReady()} and \com{usbSetInterrupt()}

* Update the V-USB system at least every 50 ms \\ \com{usbPoll()}





Getting Started / Getting Oriented
========================

* Download the zip file or clone the repo \com{https://github.com/obdev/v-usb.git}

* The subdirectory \com{usbdrv} contains files to link into your code:
	\com{usbdrv/usbdrv.o, usbdrv/usbdrvasm.o}

* \com{usbdrv/usbdrv.h} describes the API \\ (you should read this to see all the possibilities)

* Copy the file \com{usbconfig-prototype.h} to your code directory and edit it
  to fit your particular configuration

* The \com{examples/} directory is full of goodies.  \\ 
	My scrollwheel builds off of \com{hid-mouse} \\
	The weather gadget builds off of \com{custom-class} 

Project 1: Scrollwheel: An HID Demo
+++++++++++++++++++++++++++++++++++

HID!
====

Welcome to Infinity
-----------------

* The variety of Human Interface Devices is mindblowing

* Don't believe me? 100 pages of "HID Usage Tables"

* "Usage" is USB for what the thing does

* Usages are stardard

Usage Pages
-----------

* So many usages, that they're grouped in pages 

* Generic Desktop Controls, Simulation Controls, VR Controls
 \\
 Medical Equipment, Telephony, Camera

HID!
====

Usages
------

* Mouse, Joystick, Keyboard, Gamepad

* Tank, Submarine, Spaceship, Magic Carpet Simulation \\
  (Turret Position, Wing Flaps, Chaff Release, Dive Break)
  
* Head Tracker, Body Suit (points and positions for all joints)

* Golf Club (Sand Wedge, Stick Face Angle, Follow Through)

* Media controls, application launchers, 3D digitizers


Report Descriptors
==================

Overview
---------

* Nested structure: \\ Usage Table \leads Usage \leads Lower-level Usage

* If your device has multiple usages, you can group them logically into 
  \emph{Collections}: \\ 
  a Graphic EQ is a collection of sliders \\ 
  our Mouse is a collection of X, Y, buttons, and scrollwheel

* You can collect things together by "Application", \\ "Logical" layout, or
 "Physical" proximity

* Define your data structures: \\
     Buttons are binary bits (on/off), \\ 
	Axes need a full byte (or more!) each \\ 
	Scrollwheel is probably a signed integer 

Report Descriptors
==================

Resources
---------

* USB.org's HID Page: \com{http://www.usb.org/developers/hidpage/ } \\ 
	Download and read the "HID Usage Tables" \\ 
	Especially see the examples in the Appendix \\
	
* USB.org's HID Report Tool: \\ 
  \com{http://www.usb.org/developers/hidpage\#HID Descriptor Tool }

* Good overview tutorial: \\ 
  \com{http://eleccelerator.com/ \\ tutorial-about-usb-hid-report-descriptors/ }

Report Descriptors
==================

... or Cheat
------------

* Find a device that's like yours and rip off it's descriptor

* Modify slightly to match your situation, and you're done

* Making a mouse?  You're not the first. \\ No need to re-invent the scrollwheel! 

* Using V-USB?  Tons of documented projects out there.  

* I'm ripping my descriptor off the V-USB example mouse, \\ which is in turn copied from Logitech

Code or Go Home
===============

Let's get started
-----------------

* Making an Interrupt-mode device -- a mouse

* Need to define the HID Report Descriptor: \com{descriptor.h} \\ 
  also create variable to store the report data

* Need to set up an Interrupt-OUT endpoint to talk to host: \com{usbconfig.h}

* Need to generate HID mouse reports so that they're ready when host asks: our main routine \com{scrollWheel.c}


Report Descriptor (Part I)
==========================

:: \inputminted[fontsize=\tiny]{c}{project_scrollwheel/descriptor_a.h}

Report Descriptor (Part II)
==========================

:: \inputminted[fontsize=\scriptsize]{c}{project_scrollwheel/descriptor_b.h}


Changes to \com{usbconfig.h}
============================

:: \inputminted[fontsize=\scriptsize]{c}{project_scrollwheel/usbconfig_diff.h}

Finally, The Code
=================

:: \inputminted[fontsize=\tiny]{c}{project_scrollwheel/scrollWheel.c}


The Include File
=================

:: \inputminted[fontsize=\scriptsize]{c}{project_scrollwheel/scrollWheel.h}




Circuit Concerns 
==============

Power
------------

* $V_{BUS}$ is a 5V power supply,\\ but we need to transmit using 3.6V signals

* Devices \emph{can} be self-powered: Run it on a 3.6V battery.  Done. 

* We all like bus-powered devices \\ \leads we'll have to work around the two voltages

* Two methods:\\  convert 5V down to 3.6V first, run AVR at 3.6V \\ run AVR at 5V but limit output signal voltage to 3.6V

* Good discussion of pros/cons at \com{http://vusb.wikidot.com/hardware}

* Choose to run AVR at 5V:  \\ 
   use zener diodes to limit output voltage

Circuit Concerns 
==============

Timing
------

* Baud rate with 1\%ish precision: 1.50Mb/s 

* Easy way: Use an external crystal for the AVR's CPU clock \\
	12, 12.8, 15, 16, 16.5, 18 or 20 MHz

* Cheap, kludgy way: run CPU clock out of spec \\
       Calibrate the AVR's 8 MHz internal clock using USB \\

* Viable option with ATTiny 45, 85, 261 chips  \\
	have a high-speed (64MHz) internal oscillator \\
	(Adafruit Trinket, Sparkfun AVR Stick, Digispark)

Circuit Diagram
===============

%% images/with-zener.png

Ghetto USB Hookup
=================

%! images/ghetto_usb_hookup.jpg




Project 2: Weather Thing: Custom USB Data
+++++++++++++++++++++++++++++++++++++++++

The Weather Thing
=================

%! images/weather_thing.png



Making a Custom Device
======================

Advantages
----------

* Don't have to write a HID Report Descriptor

* Can do non-standard things: \\ 
	Control servomotors, for instance

Disadvantages
----------

* Requires writing host-side code

* Have to define and handle the commands yourself

* Requires a bit of detailed know-how: Control Transfers



Control Transfers
==================

What you need to know
----------------------

* Three Packet Types: Setup, Data, Acknowledgement  

* Starts with Host sending a Setup packet: \\ 
  specifies type, direction, and amount of data that follows

* Optional Data packet(s) can go either way (IN or OUT): \\  
  Device or Host can send the data packets

* If Host sent data, V-USB handles the ACK automagically


Setup Packet
=============

The heart and soul of Control Transfers
---------------------------------------

* 8 Bytes

* \com{bmRequestType}: \\ 
	Includes transfer direction (IN/OUT), \\
	Control Type (Standard, Class, Vendor-specific) \\ 
	Recipient (Device, Interface, Endpoint, Other)

* \com{bRequest}: The request command itself -- one byte

* \com{wValue} and \com{wIndex}:\\ Two words (each 2 bytes) of request options 

* \com{wLength}: Length of the optional data stage (in bytes)


Setup In Detail
===============

\com{bmRequestType}
------------------------

* IN/OUT matters.  Remember relative to host. 

* For custom commands, select "Vendor-specific"

* When V-USB gets a custom Setup packet, it calls the function \com{usbFunctionSetup}.  


\com{bRequest}
--------------

* Can specify 256 commands for the Device

* Host and Device agree on what the commands are / do

* For OUT data, you can send four bytes of arguments \\ 
  without even using the data stage 
  (\com{wValue} and \com{wIndex}) 


Control Transfers
=================

Using the Data Stage
--------------------

* To get data from the AVR to the host (IN) \\ 
  you need to specify \com{wLength}

* If you need to send more than 4 bytes OUT, \\
  you need to specify \com{wLength}

* V-USB calls the functions 
  \com{usbFunctionRead()} and \com{usbFunctionWrite()} to handle these data
  transactions \\ 
  ("read" reads data into the host)

* Gotcha: need to enable read/write functions in the config

* See the example \com{hid-data} and \com{usbdrv.usbdrv.h} for details
   
Enough Talk, Let's Code
=======================

Host-Side: Python
=================

Setup
------

* Install Python and the \com{pyusb} library 

* Win/Mac will also need \com{libusb}

* See \com{https://github.com/walac/pyusb} for install help  
%  and \com{https://github.com/walac/pyusb/blob/master/docs/tutorial.rst} for an intro 

* Quick test: \\ 
:: \inputminted[fontsize=\scriptsize]{python}{pyusb_test.py}

 Prints out VID:PID of all devices attached (in hexadecimal)


Host-Side: Python
=================

Code Outline:
-------------

* Fetch weather forecast data over Internet

* Convert to pulse length for servomotor

* Push pulse length over USB to AVR using Control Transfer

Control Transfer:
-----------------

* Need to build \com{bmRequestType}: \\ 
  OUT transfer, Vendor-specific

* Set \com{wValue} to the desired pulse length

* No data.  Done.


Host-Side: Internet Part
=================

:: \inputminted[fontsize=\scriptsize]{python}{project_weatherThing/software/sendWeather_internet_part.py}



Host-Side: USB Part
=================

:: \inputminted[fontsize=\scriptsize]{python}{project_weatherThing/software/sendWeather_USB_part.py}


AVR Side Code
==============

Writing Custom Commands
-----------------------


* All the action here is in the Control transfer handling

* When the AVR receives a Control transfer, the standard responses are handled by the V-USB library

* When the AVR receives a Control transfer in Vendor-specific mode, it passes the setup packet along
  to the user-implemented function \com{usbFunctionSetup}.

* Note that we first cast the data as a \com{usbRequest\_t} type, which lets us read in the individual
bytes by name, and handle the two-byte \com{wValue} field as a 16-bit number



AVR Code Control Setup 
================

:: \inputminted[fontsize=\scriptsize]{c}{project_weatherThing/firmware/setupHandler.c}

AVR Code Main Loop 
================

:: \inputminted[fontsize=\scriptsize]{c}{project_weatherThing/firmware/mainloop.c}



The Build 
=========================

(Such As It Is)
----------

* Grabbed some weather icons in SVG off the web \\ (Thanks Alessio Atzeni!)

* Printed the icons and a pointer out on paper, \\ spray-glued to cardboard

* Hot-glued arrow to a servo horn, \\ and the servo motor to the back of the sign

* Connect servo power up to AVR, adding an extra capacitor 

* The control pin to the servo hooked up to AVR PB1: \\ a direct-out from the 16-bit Timer1 

* That's it!

Demo
=====

Comments
========

Custom commands are easy
-------------------------

* Intimidating at first?

* Less work here than in figuring out an HID Usage report

* You have to keep track of the command dictionary on the host application and in the AVR

* You have to keep track of what data's being passed

* But then writing one or two functions to handle it all is easy 

* The cost is that you have to write host code, \\ 
  but that's not that bad either?

Summary
=======

What have we learned?
----------------------

* How to make HID and Custom USB devices, \\ and write host-side code when necessary (whew!)

* How to hook up a regular AVR chip as a simple USB device

* Far too much detail about USB -- I hope it serves you well 


Resources
=========

* V-USB website and Wiki \com{ http://www.obdev.at/products/vusb/index.html}

* All code, slides, etc \com{http://www.githib.com/hexagon5un/vusbWebinar}

* My AVR Site: \com{www.littlehacks.org} 

* Hackaday, Make Blog, Sparkfun, LadyAda for inspiration

* "USB Made Simple" \com{http://www.usbmadesimple.co.uk/index.html}

* "USB in a Nutshell" \com{http://www.beyondlogic.org/usbnutshell/usb1.shtml} 


Oh yeah, I wrote a book
=======================

%! images/cover_800.png



Questions?
==========

